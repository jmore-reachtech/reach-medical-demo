import QtQuick 2.9
import QtQuick 2.12
import QtQuick.Window 2.2
import QtCharts 2.2
import QtQuick.Controls 2.3
import QtPositioning 5.4
import QtSensors 5.9
import QtQuick.Scene2D 2.9
import QtQuick 2.1
import QtQuick.Layouts 1.11
import QtQuick 2.9
import QtQuick.Window 2.2
import QtQuick.Controls.Styles 1.4
import QtQuick.Controls 2.3
import QtQuick.Layouts 1.4
import QtQuick.Controls 1.4
import QtQuick.Controls.Private 1.0
import QtGraphicalEffects 1.12
import QtQuick.Controls 2.12

import "."

Window {
  id: mainWindow

  visible: true
  width: 800
  height: 480
  color: "black"
  title: qsTr("Reach Technologies -- Medical Demo")

  property int fontSize80: height / 6
  property int fontSize60: height / 8
  property int fontSize50: height / 10
  property int fontSize40: height / 12
  property int fontSize35: height / 14
  property int fontSize32: height / 15
  property int fontSize30: height / 16
  property int fontSize25: height / 19
  property int fontSize24: height / 20
  property int fontSize20: height / 24
  property int fontSize18: height / 27
  property int fontSize14: height / 34
  property int fontSize13: height / 37
  property int fontSize12: height / 40
  property int fontSize11: height / 44
  property int fontSize10: height / 48
  property int fontSize8: height / 60
  property int fontSize6: height / 80
  property int fontSize5: height / 96
  property int fontSize2: height / 240

  property int boxSize: height / 6
  property int boxSize1: height / 5
  property int textMargin: fontSize12 / 2
  property int mainLeftMargin: fontSize30

  property int column1: fontSize80 + fontSize40 + fontSize24
  //    property int column2: fontSize80 + fontSize40 + fontSize24

  property int myBarNum: 20
  property int myBarSpace: fontSize2
  property int myBarHeight: fontSize8
  property int myBarBase: myBarNum * (myBarSpace + myBarHeight)

  property int mySalineValue: 75
  property int myHiCorValue: 75
  property int myGlucagonValue: 75



  signal submitTextField(string text)

//  StackLayout {
//    id: stackMain
//    currentIndex: 0

    Rectangle {
      id: main
      signal sendPreviousScreen(int screen)
      signal startAnimation()
      // border.color: "red"
      // border.width: 2

      width: mainWindow.width
      height: mainWindow.height

      FontLoader {
        id: sourceSansLight;source: "Fonts/SourceSansPro-Light.otf"
      }

      property
      var screen: {
        "main": 0,
        "schedule": 1,
        "patients": 2,
        "alarm": 3
      }

      property int buttonsAnimationX: 760
      property color backgroundColor: "black"
      property color secondaryColor: "#939598"
      property color detailsColor: "#414142"
      property color mustard: "#c2b59b"
      property color purple: "#662D91"
      property color green: "#39B54A"
      property color blue: "#2075BC"
      property color textButtonColor: "white"

      property int circleDuration: 10
      property int gifDuration: 150
      property int gifDelay: 10
      property int textDuration: 20
      property int textDelay: 10

      property string gender: "Male"
      property
      var patient: {
        "name": "Patient Name",
        "paNum": "148326",
        "admDate": "Feb 22, 2019",
        "admTime": "12:34 PM",
        "dob": "03/18/1967",
        "room": "201-B2",
        "bloodPressureSys": 120,
        "bloodPressureDia": 78
      }
      property
      var patientObj

      property double subTextOpacity: 0.8
      property int opacityAnimation: 0

      function receivePatientInfo(patientJSON) { //TO DO: change to patientInfo (object)
        patientObj = JSON.parse(patientJSON);
        patient = patientObj;
      }

      function restartYAnimations() {
        patientAnimation.restart();
        secondRowAnimation.restart();
        conditionRowAnimation.restart();
        greenDotAnimation.restart();
        hospitalAnimation.restart();
        paNumAnimation.restart();
        clockAnimation.restart();
      }

      function restartOpacityAnimations() {

        gifAnimation.restart();
        circleAnimation.restart();
        textAnimation.restart();
        valueAnimation.restart();
        bloodPressureLeftAnimation.restart()
        bloodPressureRightAnimation.restart()
        buttonAnimation.restart()
        alarmButtonAnimation.restart()
        temperatureAnimation.restart()
      }

      function initializeOpacity() {
        //Initialize the target elements on opacity 0
        gifEKGLine.opacity = 0;
        gifPulseLine.opacity = 0;
        greenCircle.opacity = 0;
        purpleCircle.opacity = opacityAnimation;
        blueCircle.opacity = opacityAnimation;
        textEKG.opacity = opacityAnimation;
        textEKGValue.opacity = opacityAnimation;
        textBMP.opacity = opacityAnimation;
        textPulse.opacity = opacityAnimation;
        textPulseValue.opacity = opacityAnimation;
        textSpO.opacity = opacityAnimation;
        textInsulinPump.opacity = opacityAnimation;
        textUHr.opacity = opacityAnimation;
        insulinP.opacity = opacityAnimation;
        temperatureLeft.opacity = opacityAnimation;
        temperatureRight.opacity = opacityAnimation;
        salineTimer.sliderNumber = 25;
      }

      function restartSliders() {
        for (var i = 0; i < 25; ++i) {
          if (repeater.itemAt(i) !== null) {
            repeater.itemAt(i).color = "#414142"
          }

          if (repeater1.itemAt(i) !== null) {
            repeater1.itemAt(i).color = "#414142"
          }

          if (repeater2.itemAt(i) !== null) {
            repeater2.itemAt(i).color = "#414142"
          }
        }
        salineAnimation.restart()
        salineTimer.restart()
        salineTextAnimation.restart()

        hicorAnimation.restart()
        hicorTimer.restart()
        hicorTextAnimation.restart()

        glucagonAnimation.restart()
        glucagonTimer.restart()
        glucagonTextAnimation.restart()

      }

      function receiveAnimation() {
        initializeOpacity();
        restartYAnimations();
        restartOpacityAnimations();
        restartSliders();
      }

      color: backgroundColor
/*
      NumberAnimation {
        id: mainAnimation
        target: main
        property: "opacity"
        running: stackMain.currentIndex === 0
        easing.type: Easing.InOutQuad
        duration: 300
        from: 0
        to: 1
      }
*/
      //----- Patient Info
      Rectangle {
        id: topRow
        height: main.height / 6
        width: main.width

        Rectangle {
          id: patientBox
         // border.width: 2
         // border.color: "blue"
          anchors.left: parent.left
          width: main.width / 3 //- fontSize40
          height: parent.height
          color: main.backgroundColor

          Text {
            anchors {
              bottom: parent.bottom
              bottomMargin: fontSize50
              left: parent.left
              leftMargin: fontSize12
            }

            objectName: "textPatientName"
            id: textPatientName
            color: "#c2b59b"
            text: "Fred Dalton Thompson"
            font.pixelSize: fontSize18
          }

          NumberAnimation {
            id: patientAnimation
            target: textPatientName
            property: "y"
            from: -10
            to: 16
            duration: 500
            running: true
          }

          Text {
            objectName: "textPatientGender"
            id: textPatientGender
            anchors {
              bottom: parent.bottom
              bottomMargin: fontSize25
              left: parent.left
              leftMargin: mainLeftMargin
            }

            color: "white"
            text: main.gender
            font.pixelSize: fontSize14
          }

          Text {
            id: textPatientAgeTitle
            anchors {
              bottom: textPatientGender.bottom
              right: textPatientAgeValue.left
              rightMargin: fontSize11
            }

            color: "#939598"
            text: qsTr("Age:")
            font.pixelSize: fontSize13
          }

          Text {
            objectName: "textPatientAge"
            id: textPatientAgeValue
            anchors {
              bottom: textPatientGender.bottom
              left: parent.left
              leftMargin: column1
            }
            color: "white"
            text: qsTr("54")
            font.pixelSize: fontSize14
          }

          NumberAnimation {
            id: secondRowAnimation
            targets: [textPatientGender, textPatientAgeTitle, textPatientAgeValue, textAdmission, admissionDateValue]
            property: "y"
            from: -10
            to: 38
            duration: 500
            running: true
          }
          //   } //rectangle




          //Patient Condition
          Rectangle {
            id: rectCond
            anchors {
              bottom: parent.bottom
             //bottomMargin: fontSize5
              left: parent.left
              leftMargin: mainLeftMargin
            }

            radius: width / 2
            color: "green"
            width: fontSize18
            height: width
            smooth: true
          }

          Text {
            id: textCondition
            anchors {
              bottom: rectCond.bottom
              right: textConditionValue.left
              rightMargin: fontSize11
            }
            color: "#939598"
            text: qsTr("Condition: ")
            font.pixelSize: fontSize13
          }

          Text {
            objectName: "textConditionValue"
            id: textConditionValue
            anchors {
              bottom: rectCond.bottom
              left: parent.left
              leftMargin: column1
            }
            color: "white"
            text: qsTr("Stable")
            font.pixelSize: fontSize14
          }

          NumberAnimation {
            id: conditionRowAnimation
            targets: [textCondition, textConditionValue, textRoomNo, roomValue]
            property: "y"
            from: -10
            to: 58
            duration: 500
            running: true
          }
        } //rectangle







        Rectangle {
          id: admitBox
          //border.width: 2
          //border.color: "orange"
          color: main.backgroundColor
          anchors.left: patientBox.right
          anchors.bottom: patientBox.bottom
          width: main.width / 3 + 25
          height: parent.height

          Text {
            objectName: "paNumValue"
            id: paNumValue
            anchors {
              bottom: parent.bottom
              bottomMargin: fontSize50
              left: parent.left
            }
            color: "#c2b59b"
            text: main.patient.paNum
            renderType: Text.NativeRendering
            font.pixelSize: fontSize14
          }
          NumberAnimation {
            id: paNumAnimation
            target: paNumValue
            property: "y"
            duration: 500
            from: -10
            to: 20
            running: true
          }

          Text {
            id: textAdmission
            anchors {
              bottom: parent.bottom
              bottomMargin: fontSize25
              left: parent.left
            }
            color: "#939598"
            text: qsTr("Admission:")
            font.pixelSize: fontSize13
          }

          Text {
            objectName: "admissionDateTime"
            id: admissionDateValue
            anchors {
              bottom: textAdmission.bottom
              left: textAdmission.right
              leftMargin: fontSize11
            }
            color: "white"
            text: main.patient.admDate + " / " + main.patient.admTime
            font.pixelSize: fontSize14
          }

          //Room Number
          Text {
            id: textRoomNo
            anchors {
              bottom: parent.bottom
              right: textAdmission.right
            }
            color: "#939598"
            text: qsTr("Room:")
            font.pixelSize: fontSize14
          }

          Text {
            objectName: "roomNumber"
            id: roomValue
            anchors {
              bottom: textRoomNo.bottom
              left: textAdmission.right
              leftMargin: fontSize11
            }
            color: "white"
            text: main.patient.room
            font.pixelSize: fontSize14
          }
        } //rectangle















        //Hospital Name
        Rectangle {
          id: hospitalBox
          //border.width: 2
          //border.color: "blue"
          color: main.backgroundColor

          anchors.left: admitBox.right
          anchors.bottom: patientBox.bottom
          width: main.width / 3 - 100
          height: parent.height

          Text {
            objectName: "hospitalName"
            id: textHospitalName
            anchors {
              bottom: parent.bottom
              bottomMargin: fontSize50
              left: parent.left
            }

            color: "#c2b59b"
            text: "St Elsewhere"
            font.pixelSize: fontSize14
          }
          NumberAnimation {
            id: hospitalAnimation
            target: textHospitalName
            property: "y"
            duration: 500
            from: -10
            to: 18
            running: true
          }

          //Date and Time
          Rectangle {
            id: clockRow
            width: 50
            height: hourLabel.implicitHeight
            color: main.backgroundColor

            //border.color: "yellow"
            //border.width: 2


            anchors {
              bottom: parent.bottom
              bottomMargin: fontSize25
              left: parent.left
            }

            //Function to split and set the time
            function setTime() {
              var time = new Date().toLocaleTimeString([], {
                hour: '2-digit'
              }, {
                minute: '2-digit'
              }).toString()
              var hour = time.slice(1, 2) === ":" ? time.slice(0, 1) : time.slice(0, 2)
              var minute = time.slice(1, 2) === ":" ? time.slice(2, 4) : time.slice(3, 5)
              var am_pm = time.slice(1, 2) === ":" ? time.slice(5, 7) : time.slice(6, 8)
              hourLabel.text = hour
              minutesLabel.text = minute
              am_pmLabel.text = am_pm
            }

            Text {
              id: hourLabel
              font.pixelSize: fontSize14
              color: "white"
              anchors {
                //right: colonLabel.left;
                left: parent.left
              }

              //                }

              Text {
                id: colonLabel
                font.pixelSize: fontSize14
                text: ":"
                anchors {
                  left: hourLabel.right;
                  bottom: parent.bottom
                }

                SequentialAnimation on color {
                  loops: Animation.Infinite
                  ColorAnimation {
                    from: "white";to: main.backgroundColor;duration: 1000
                  }
                  ColorAnimation {
                    from: main.backgroundColor;to: "white";duration: 1000
                  }
                }
              }

              Text {
                id: minutesLabel
                font.pixelSize: fontSize14
                color: "white"
                anchors {
                  left: colonLabel.right;
                  bottom: parent.bottom
                }
              }

              Text {
                id: am_pmLabel
                font.pixelSize: fontSize13
                leftPadding: 5
                bottomPadding: 1
                color: "white"
                anchors {
                  left: minutesLabel.right;
                  bottom: parent.bottom
                }
              }
            }
            //Timer to update the time using the setTime() function"
            Timer {
              id: timeTimer
              interval: 1000
              repeat: true
              running: true
              triggeredOnStart: true
              onTriggered: clockRow.setTime()
            }

          } //rectangle

          NumberAnimation {
            id: clockAnimation
            target: clockRow
            property: "y"
            from: -10
            to: 40
            duration: 500
            running: true
          }

          Label {
            id: currentDateLabel
            property date currentDate: new Date()
            //elide: Text.ElideRight
            font.pixelSize: fontSize13
            //horizontalAlignment: Text.AlignRight
            anchors {
              bottom: parent.bottom;
              left: parent.left;
              //rightMargin: 39;
              //topMargin: 3
            }
            color: "white"

            //Function to set the date with the format "Weekday, Month day (Eg. Monday, June 10)"
            function setDate() {
              var date = new Date();
              var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
              var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

              var weekday = weekdays[date.getDay()];
              var month = months[date.getMonth()];
              var day = date.getDate();

              var secs = date.getTime();

              currentDateLabel.text = weekday + ", " + month + " " + day
            }
          }

          //Timer to update the date using the setDate() function"
          Timer {
            id: dateTimer
            interval: 1000
            repeat: true
            running: true
            triggeredOnStart: true
            onTriggered: currentDateLabel.setDate()
          }

          Image {
            id: topLine
            x: 729
            y: 10
            fillMode: Image.PreserveAspectFit
            source: "Images/line-65.png"
          }

          Image {
            id: middleLine
            anchors {
              top: topLine.bottom;horizontalCenter: topLine.horizontalCenter;topMargin: 46
            }
            source: "Images/line-224.png"
            fillMode: Image.PreserveAspectFit
          }

          Image {
            id: bottomLine
            anchors {
              top: middleLine.bottom;horizontalCenter: middleLine.horizontalCenter;topMargin: 46
            }
            fillMode: Image.PreserveAspectFit
            source: "Images/line-78.png"
          }
        }

      } //row















      //----- Temperature
      Rectangle {
        id: tempBox

        height: fontSize80
        width: main.width / 2 - fontSize40

        anchors {
          left: parent.left
          top: topRow.bottom
        }

        color: main.backgroundColor

        //border.color: "gray"
        //border.width: 1

        Text {
          id: textTemperature
          anchors {
            left: tempBox.left
            leftMargin: mainLeftMargin
            top: tempBox.top
            topMargin: fontSize18
          }
          color: "#c2b59b"
          text: qsTr("Temperature")
          font.pixelSize: fontSize13
        }

        Text {
          id: textCelsius
          anchors {
            left: textTemperature.right
            leftMargin: fontSize14
            bottom: textTemperature.bottom
          }
          color: "#c2b59b"
          text: qsTr("Celsius")
          font.pixelSize: fontSize11
        }

        Text {
          objectName: "temperatureLeft"
          id: temperatureLeft
          anchors {
            top: textTemperature.top;
            topMargin: fontSize12
            left: parent.left;
            leftMargin: fontSize30
          }
          color: "#c2b59b"
          text: qsTr("36.7°")
          font.pixelSize: fontSize32
          font.family: sourceSansLight.name
          opacity: 0
        }

        Rectangle {
            id: imageCircleArrow
            height: fontSize20
            width: height
            radius: width / 2
            //border.color: "white"
            //border.width: 1
            color: "yellow"
            anchors {
              left: temperatureLeft.right;
              verticalCenter: temperatureLeft.verticalCenter;
              leftMargin: fontSize10;
            }

            Image {
              id: imageArrow
              fillMode: Image.PreserveAspectFit
              sourceSize: Qt.size(parent.width, parent.height)
              source: "Images/arrow_50x50.png"
              smooth: true
              rotation: 0
            }
        }

        Text {
          objectName: "tempRight"
          id: temperatureRight
          anchors {
            top: temperatureLeft.top;
            left: imageCircleArrow.right;
            leftMargin: fontSize10
          }
          color: "#c2b59b"
          text: qsTr("37.4°")
          font.pixelSize: fontSize32
          font.family: sourceSansLight.name
          opacity: 0
        }

        NumberAnimation {
          id: temperatureAnimation
          targets: [temperatureRight, temperatureLeft]
          property: "opacity"
          running: true
          easing.type: Easing.InOutQuad
          duration: 2000
          to: 1
        }

        Text {
          objectName: "textHighest"
          id: textHighest
          anchors {
            left: temperatureRight.right;
            leftMargin: fontSize24;
            verticalCenter: temperatureLeft.verticalCenter;
          }
          color: "#939598"
          text: qsTr("Highest")
          font.pixelSize: fontSize12
          font.family: sourceSansLight.name
        }

        Text {
          objectName: "tempHighest"
          id: tempHighest
          anchors {
            left: textHighest.right;
            leftMargin: fontSize14;
            verticalCenter: temperatureLeft.verticalCenter;
          }
          color: "#c2b59b"
          text: qsTr("38.4°")
          font.pixelSize: fontSize24
          font.family: sourceSansLight.name
        }
      }

      //----- Blood Pressure
      Rectangle {
        id: bpBox

        height: main.height / 4
        width: main.width / 2 - fontSize40

        anchors {
          left: parent.left
          top: tempBox.bottom
        }

        color: main.backgroundColor
        //border.color: "gray"
        //border.width: 1

        Text {
          id: textBloodPressure
          anchors {
            left: parent.left
            leftMargin: mainLeftMargin
            top: parent.top
          }
          color: "#c2b59b"
          text: qsTr("Blood Pressure")
          font.pixelSize: fontSize14
        }

        Text {
          id: textmmHg
          anchors {
            left: textBloodPressure.right
            leftMargin: fontSize18
            bottom: textBloodPressure.bottom
          }
          color: "#939598"
          text: qsTr("mmHg")
          font.pixelSize: fontSize12
        }

        Text {
          id: textSYS
          anchors {
            left: textBloodPressure.left
            top: textBloodPressure.bottom
          }
          color: "#939598"
          text: qsTr("SYS")
          font.pixelSize: fontSize10
        }

        Text {
          id: textDIA
          anchors {
            left: bpDia.left
            bottom: textSYS.bottom
          }
          color: "#939598"
          text: qsTr("DIA")
          font.pixelSize: fontSize10
        }

        Text {
          objectName: "bpSys"
          id: bpSys
          property int bloodPressureLeft: 0
          anchors {
            right: imageBackSlashLarge.left;
            rightMargin: 15
            verticalCenter: imageBackSlashLarge.verticalCenter;
          }
          color: "#c2b59b"
          text: bloodPressureLeft
          font.pixelSize: fontSize80
        }

        NumberAnimation {
          id: bloodPressureLeftAnimation
          property: "bloodPressureLeft"
          from: 0
          to: main.patient.bloodPressureSys
          duration: 2000
          target: bpSys
          running: true
        }

        Image {
          id: imageBackSlashLarge
          anchors {
            left: parent.left
            leftMargin: main.width / 4
            bottom: parent.bottom
            bottomMargin: fontSize14
          }
          fillMode: Image.PreserveAspectFit
          source: "Images/back-slash-large.png"
        }

        Text {
          objectName: "bpDia"
          id: bpDia
          property int bloodPressureRight: 0
          anchors {
            left: imageBackSlashLarge.right;
            verticalCenter: imageBackSlashLarge.verticalCenter;
            leftMargin: 15
          }
          color: "#c2b59b"
          text: bloodPressureRight
          font.pixelSize: fontSize80
        }

        NumberAnimation {
          id: bloodPressureRightAnimation
          property: "bloodPressureRight"
          from: 0
          to: main.patient.bloodPressureDia
          duration: 2000
          target: bpDia
          running: true
        }
      }












      //----- Medications
      Rectangle {
        id: medsBox

        height: main.height / 2
        width: main.width / 2 - fontSize40

        anchors {
          left: tempBox.right
          top: topRow.bottom
          topMargin: fontSize18
        }

        color: main.backgroundColor

        //border.color: "gray"
        //border.width: 1

        Text {
          id: elementTextMedication

          anchors {
            left: parent.left
            top: medsBox.top
          }
          color: "#c2b59b"
          text: qsTr("Medications")
          font.pixelSize: fontSize13
        }








//-----------------------------------  Saline
        Rectangle {
            id: salineBox
            anchors {
                left: parent.left
                top: elementTextMedication.bottom
                topMargin: fontSize10
            }

            width: fontSize80 + fontSize20
            height: fontSize80 * 2 + fontSize40
            color: main.backgroundColor

            //border.width: 1
            //border.color: "blue"

        Text {
          id: elementTextSaline
          anchors {
            left: rectangleRepeaterComponent.right
            leftMargin: fontSize5
            top: parent.top
            //topMargin: fontSize24
          }
          color: "white"
          text: qsTr("Saline")
          font.pixelSize: fontSize14
        }

        Text {
          objectName: "elementTextSalineVal"
          id: elementTextSalineVal
          anchors {
            left: elementTextSaline.left
            top: elementTextSaline.bottom
          }
          color: "#c2b59b"
          text: mySalineValue
          font.pixelSize: fontSize40
          font.family: sourceSansLight.name

          function doIt(val) {
            var theNum = parseInt(repeater.count - (val / 5))
            //console.log("The Num == " + theNum, " Rep Cnt = ", repeater.count);
            for (var i = 0; i < repeater.count; i++)
            {
              if (theNum >= i || theNum < 0)
              {
                repeater.itemAt(i).color = main.mustard
                //console.log("d = ", i, " repCnt = ", repeater.count);

              } else
              {
                repeater.itemAt(i).color = "#414142"
                //console.log("e = ", i, " repCnt = ", repeater.count);
              }
            }
          }

          onTextChanged: {
            mySalineValue = elementTextSalineVal.text
            console.log("Text Changed to " + mySalineValue + " --> " + elementTextSalineVal.text)
            rectangleRepeaterComponent.salValue = mySalineValue
            doIt((mySalineValue))
          }
        }

        Text {
          id: salinePercentage
          color: "#c2b59b"
          text: "%"
          font.pixelSize: fontSize30
          font.family: sourceSansLight.name
          anchors {
            left: elementTextSalineVal.right;
            top: elementTextSalineVal.top;
          }
        }

        Rectangle {
          id: rectangleRepeaterComponent
          anchors {
            left: parent.left
            top: elementTextSaline.top
          }
          width: fontSize25
          height: fontSize80 + fontSize80 + fontSize30
          color: main.backgroundColor
          property int salValue: 0

          Column {
            x: 0
            y: 0
            spacing: myBarSpace
            Repeater {
              id: repeater
              model: myBarNum
              Rectangle {
                width: fontSize25
                height: myBarHeight
                color: "#414142"
              }
            }
          }

          Timer {
            id: salineTimer
            property int sliderNumber: myBarNum
            property int sliderEnd: calculateStartPoint(mySalineValue)
//            property int sliderMarks: myBarNum

            function calculateStartPoint(mySalineValue) {
              var startPoint = parseInt(myBarNum - (mySalineValue * myBarNum / 100));
              console.log("Start Point changed to " + startPoint)
              return startPoint;
            }

            interval: 1500
            repeat: true
            running: true
            triggeredOnStart: true
            onTriggered: {
              //console.log("Triggered = " + salineTimer.sliderNumber)
              if (repeater.itemAt(salineTimer.sliderNumber) !== null)
              {
                repeater.itemAt(salineTimer.sliderNumber).color = main.mustard
              }
              if (salineTimer.sliderNumber === salineTimer.sliderEnd)
              {
                salineTimer.stop()
              }

            }
          }

          NumberAnimation {
            id: salineAnimation
            target: salineTimer
            property: "sliderNumber"
            from: salineTimer.sliderNumber
            to: salineTimer.sliderEnd
            duration: 200
            running: true
          }


          MouseArea {
            anchors.fill: parent
            onClicked: {
              var base = myBarNum * (myBarSpace + myBarHeight)
              for (var ii = 0; ii < repeater.count; ii++) {
                if (repeater.itemAt(ii).y + 5 >= mouseY) {
                  repeater.itemAt(ii).color = main.mustard
                } else {
                  repeater.itemAt(ii).color = "#414142"
                }
                var Y = mouseY
                if(Y < 0) Y = 0;
                if(Y > myBarBase) Y = myBarBase;
                var val = parseInt((myBarBase - Y)/2)
                elementTextSalineVal.text = val
                mySalineValue = val
              }
              submitTextField("saline.value = " + elementTextSalineVal.text)
            }

            onPositionChanged: {
              var myI = 0;
              for (myI = 0; myI < repeater.count; myI++)
              {
                if (repeater.itemAt(myI).y >= mouseY)
                {
                  repeater.itemAt(myI).color = main.mustard
                } else {
                  repeater.itemAt(myI).color = "#414142"
                }
                var Y = mouseY
                if(Y < 0) Y = 0;
                if(Y > myBarBase) Y = myBarBase;
                var val = parseInt((myBarBase - Y)/2)
                elementTextSalineVal.text = val
                mySalineValue = val

              }
            }
          }
        }
    }



//-----  HiCor
        Rectangle {
            id: hiCorBox
            anchors {
                left: salineBox.right
                leftMargin: fontSize20

                top: elementTextMedication.bottom
                topMargin: fontSize10
            }

            width: fontSize80 + fontSize20
            height: fontSize80 * 2 + fontSize40
            color: main.backgroundColor

            //border.width: 1
            //border.color: "blue"

        Text {
          id: elementTextHiCor
          anchors {
            left: rectangleRepeaterComponent1.right
            leftMargin: fontSize5
            top: parent.top
            //topMargin: fontSize24
          }
          color: "white"
          text: qsTr("HiCor")
          font.pixelSize: fontSize14
        }

        Text {
          objectName: "elementTextHiCorVal"
          id: elementTextHiCorVal
          anchors {
            left: elementTextHiCor.left
            top: elementTextHiCor.bottom
          }
          color: "#c2b59b"
          text: myHiCorValue
          font.pixelSize: fontSize40
          font.family: sourceSansLight.name

          function doIt(val) {
            var theNum = parseInt(repeater1.count - (val / 5))
            for (var i = 0; i < repeater.count; i++)
            {
              if (theNum >= i || theNum < 0)
              {
                repeater1.itemAt(i).color = main.mustard
              } else
              {
                repeater1.itemAt(i).color = "#414142"
              }
            }
          }

          onTextChanged: {
            myHiCorValue = elementTextHiCorVal.text
            console.log("Text Changed to " + myHiCorValue + " --> " + elementTextHiCorVal.text)
            rectangleRepeaterComponent1.hicorValue = myHiCorValue
            doIt((myHiCorValue))
          }
        }

        Text {
          id: hiCorPercentage
          color: "#c2b59b"
          text: "%"
          font.pixelSize: fontSize30
          font.family: sourceSansLight.name
          anchors {
            left: elementTextHiCorVal.right;
            top: elementTextHiCorVal.top;
          }
        }

        Rectangle {
          id: rectangleRepeaterComponent1
          anchors {
            left: parent.left
            top: elementTextHiCor.top
          }
          width: fontSize25
          height: fontSize80 + fontSize80 + fontSize30
          color: main.backgroundColor
          property int hicorValue: 0

          Column {
            x: 0
            y: 0
            spacing: myBarSpace
            Repeater {
              id: repeater1
              model: myBarNum
              Rectangle {
                width: fontSize25
                height: myBarHeight
                color: "#414142"
              }
            }
          }

          Timer {
            id: hiCorTimer
            property int sliderNumber: myBarNum
            property int sliderEnd: calculateStartPoint(myHiCorValue)

            function calculateStartPoint(myHiCorValue) {
              var startPoint = parseInt(myBarNum - (myHiCorValue * myBarNum / 100));
              return startPoint;
            }

            interval: 1500
            repeat: true
            running: true
            triggeredOnStart: true
            onTriggered: {
              if (repeater1.itemAt(hiCorTimer.sliderNumber) !== null)
              {
                repeater1.itemAt(hiCorTimer.sliderNumber).color = main.mustard
              }
              if (hiCorTimer.sliderNumber === hiCorTimer.sliderEnd)
              {
                hiCorTimer.stop()
              }

            }
          }

          NumberAnimation {
            id: hiCorAnimation
            target: hiCorTimer
            property: "sliderNumber"
            from: hiCorTimer.sliderNumber
            to: hiCorTimer.sliderEnd
            duration: 200
            running: true
          }


          MouseArea {
            anchors.fill: parent
            onClicked: {
              var base = myBarNum * (myBarSpace + myBarHeight)
              for (var ii = 0; ii < repeater1.count; ii++) {
                if (repeater1.itemAt(ii).y + 5 >= mouseY) {
                  repeater1.itemAt(ii).color = main.mustard
                } else {
                  repeater1.itemAt(ii).color = "#414142"
                }
                var Y = mouseY
                if(Y < 0) Y = 0;
                if(Y > myBarBase) Y = myBarBase;
                var val = parseInt((myBarBase - Y)/2)
                elementTextHiCorVal.text = val
                myHiCorValue = val
              }
              submitTextField("HiCor.value = " + elementTextHiCorVal.text)
            }

            onPositionChanged: {
              var myI = 0;
              console.log("POS mouse Y === ", mouseY, " myI = ", myI)
              for (myI = 0; myI < repeater1.count; myI++)
              {
                if (repeater1.itemAt(myI).y >= mouseY)
                {
                  repeater1.itemAt(myI).color = main.mustard
                } else {
                  repeater1.itemAt(myI).color = "#414142"
                }
                var Y = mouseY
                if(Y < 0) Y = 0;
                if(Y > myBarBase) Y = myBarBase;
                var val = parseInt((myBarBase - Y)/2)
                elementTextHiCorVal.text = val
                myHiCorValue = val

              }
            }
          }
        }
    }






//-----  Glucagon
        Rectangle {
            id: glucagonBox
            anchors {
                left: hiCorBox.right
                leftMargin: fontSize20

                top: elementTextMedication.bottom
                topMargin: fontSize10
            }

            width: fontSize80 + fontSize20
            height: fontSize80 * 2 + fontSize40
            color: main.backgroundColor

            //border.width: 1
            //border.color: "blue"

        Text {
          id: elementTextGlucagon
          anchors {
            left: rectangleRepeaterComponent2.right
            leftMargin: fontSize5
            top: parent.top
            //topMargin: fontSize24
          }
          color: "white"
          text: qsTr("Glucagon")
          font.pixelSize: fontSize14
        }

        Text {
          objectName: "elementTextGlucagonVal"
          id: elementTextGlucagonVal
          anchors {
            left: elementTextGlucagon.left
            top: elementTextGlucagon.bottom
          }
          color: "#c2b59b"
          text: myGlucagonValue
          font.pixelSize: fontSize40
          font.family: sourceSansLight.name

          function doIt(val) {
            var theNum = parseInt(repeater2.count - (val / 5))
            //console.log("The Num == " + theNum, " Rep Cnt = ", repeater2.count);
            for (var i = 0; i < repeater2.count; i++)
            {
              if (theNum >= i || theNum < 0)
              {
                repeater2.itemAt(i).color = main.mustard
                //console.log("d = ", i, " repCnt = ", repeater2.count);

              } else
              {
                repeater2.itemAt(i).color = "#414142"
                //console.log("e = ", i, " repCnt = ", repeater2.count);
              }
            }
          }

          onTextChanged: {
            myGlucagonValue = elementTextGlucagonVal.text
            console.log("Text Changed to " + myGlucagonValue + " --> " + elementTextGlucagonVal.text)
            rectangleRepeaterComponent2.glucagonValue = myGlucagonValue
            doIt((myGlucagonValue))
          }
        }

        Text {
          id: glucagonPercentage
          color: "#c2b59b"
          text: "%"
          font.pixelSize: fontSize30
          font.family: sourceSansLight.name
          anchors {
            left: elementTextGlucagonVal.right;
            top: elementTextGlucagonVal.top;
          }
        }

        Rectangle {
          id: rectangleRepeaterComponent2
          anchors {
            left: parent.left
            top: elementTextGlucagon.top
          }
          width: fontSize25
          height: fontSize80 + fontSize80 + fontSize30
          color: main.backgroundColor
          property int glucagonValue: 0

          Column {
            x: 0
            y: 0
            spacing: myBarSpace
            Repeater {
              id: repeater2
              model: myBarNum
              Rectangle {
                width: fontSize25
                height: myBarHeight
                color: "#414142"
              }
            }
          }

          Timer {
            id: glucagonTimer
            property int sliderNumber: myBarNum
            property int sliderEnd: calculateStartPoint(myGlucagonValue)

            function calculateStartPoint(myGlucagonValue) {
              var startPoint = parseInt(myBarNum - (myGlucagonValue * myBarNum / 100));
              console.log("Start Point changed to " + startPoint)
              return startPoint;
            }

            interval: 1500
            repeat: true
            running: true
            triggeredOnStart: true
            onTriggered: {
              //console.log("Triggered = " + glucagonTimer.sliderNumber)
              if (repeater2.itemAt(glucagonTimer.sliderNumber) !== null)
              {
                repeater2.itemAt(glucagonTimer.sliderNumber).color = main.mustard
              }
              if (glucagonTimer.sliderNumber === glucagonTimer.sliderEnd)
              {
                glucagonTimer.stop()
              }

            }
          }

          NumberAnimation {
            id: glucagonAnimation
            target: glucagonTimer
            property: "sliderNumber"
            from: glucagonTimer.sliderNumber
            to: glucagonTimer.sliderEnd
            duration: 200
            running: true
          }


          MouseArea {
            anchors.fill: parent
            onClicked: {
              var base = myBarNum * (myBarSpace + myBarHeight)
              for (var ii = 0; ii < repeater2.count; ii++) {
                if (repeater2.itemAt(ii).y + 5 >= mouseY) {
                  repeater2.itemAt(ii).color = main.mustard
                    //console.log("Alse = ", ii);
                } else {
                  repeater2.itemAt(ii).color = "#414142"
                    console.log("Blse = ", ii);
                }
                var Y = mouseY
                if(Y < 0) Y = 0;
                if(Y > myBarBase) Y = myBarBase;
                var val = parseInt((myBarBase - Y)/2)
                elementTextGlucagonVal.text = val
                myGlucagonValue = val
              }
              submitTextField("Glucagon.value = " + elementTextGlucagonVal.text)
            }

            onPositionChanged: {
              var myI = 0;
              console.log("POS mouse Y === ", mouseY, " myI = ", myI)
              for (myI = 0; myI < repeater2.count; myI++)
              {
                console.log("mouse I === ", myI, " mouseY ===", mouseY)
                if (repeater2.itemAt(myI).y >= mouseY)
                {
                  repeater2.itemAt(myI).color = main.mustard
                  //console.log("Ilse = ", myI, " repCnt = ", repeater2.count, " mouseY = ", mouseY, " rep = ", repeater2.itemAt(myI).y );
                } else {
                  repeater2.itemAt(myI).color = "#414142"
                  console.log("Else = ", myI, " repCnt = ", repeater2.count, " mouseY = ", mouseY, " rep = ", repeater2.itemAt(myI).y );
                }
                var Y = mouseY
                if(Y < 0) Y = 0;
                if(Y > myBarBase) Y = myBarBase;
                var val = parseInt((myBarBase - Y)/2)
                //console.log("Base = ", myBarBase, " num ", " The Val === ", val, " myI = ", myI)
                elementTextGlucagonVal.text = val
                myGlucagonValue = val

              }
            }
          }
        }
    }


}



//-----  EKG
      Rectangle {
        id: ekgBox
        width: main.width / 3
        height: fontSize80
        color: main.backgroundColor
        anchors {
          left: parent.left
          leftMargin: mainLeftMargin
          top: bpBox.bottom
          topMargin: fontSize14
//          bottom: parent.bottom

        }

        Rectangle {
          id: greenCircle
          anchors {
            verticalCenter: parent.verticalCenter
            left: ekgBox.left
          }
          width: fontSize80
          height: width
          radius: width / 2
          color: main.green
          opacity: main.opacityAnimation
        }

        Text {
          id: textEKG
          color: "#ffffff"
          text: qsTr("EKG")
          font.pixelSize: fontSize12
          anchors {
            horizontalCenter: greenCircle.horizontalCenter;
            top: greenCircle.top;
            topMargin: fontSize10
          }
          opacity: 0
        }

        Text {
          objectName: "textEKGValue"
          id: textEKGValue
          color: "#ffffff"
          text: qsTr("92")
          font.pixelSize: fontSize35
          font.family: sourceSansLight.name
          anchors.centerIn: greenCircle
          opacity: 0
        }

        Text {
          id: textBMP
          color: "#ffffff"
          text: qsTr("BMP")
          font.pixelSize: fontSize11
          anchors {
            horizontalCenter: greenCircle.horizontalCenter;
            bottom: greenCircle.bottom;
            bottomMargin: fontSize10
          }
          opacity: 0
        }

        AnimatedImage {
          id: gifEKGLine
          anchors {
            left: greenCircle.right
            verticalCenter: ekgBox.verticalCenter
          }
          source: "Images/ekg-line.gif"
          opacity: 0
        }
      }

      //---------------------------------------------------------------------------------
      SequentialAnimation {
        id: circleAnimation
        running: true
        PauseAnimation {
          duration: 10
        }
        NumberAnimation {
          targets: [greenCircle, purpleCircle, purpleCircle, blueCircle]
          property: 'opacity'
          from: 0
          to: 1
          duration: main.circleDuration
        }
      }

      SequentialAnimation {
        id: gifAnimation
        running: true
        PauseAnimation {
          duration: main.gifDelay
        }

        NumberAnimation {
          targets: [gifEKGLine, gifPulseLine]
          property: "opacity"
          easing.type: Easing.InOutQuad
          duration: main.gifDuration
          from: 0
          to: 1
        }
      }

      //----  SpO2
      Rectangle {
        id: spoxBox
        width: main.width / 3
        height: fontSize80
        color: main.backgroundColor
        anchors {
          left: parent.left
          leftMargin: mainLeftMargin
          top: ekgBox.bottom
          topMargin: fontSize14
        }

        Rectangle {
          id: blueCircle
          anchors {
            verticalCenter: parent.verticalCenter
            left: spoxBox.left
          }
          width: fontSize80
          height: width
          radius: width / 2
          color: main.blue
          opacity: 0
        }

        Text {
          id: textPulse
          color: "#ffffff"
          text: qsTr("Pulse")
          font.pixelSize: fontSize12
          anchors {
            horizontalCenter: blueCircle.horizontalCenter;
            top: blueCircle.top;
            topMargin: fontSize10
          }
          opacity: 0
        }

        Text {
          id: textPulseValue
          color: "#ffffff"
          text: qsTr("95")
          font.pixelSize: fontSize35
          font.family: sourceSansLight.name
          opacity: 0
          anchors.centerIn: blueCircle
        }

        Text {
          id: textSpO
          textFormat: Text.RichText
          text: "SpO<sub>2</sub>"
          color: "#ffffff"
          font.pixelSize: fontSize11
          anchors {
            horizontalCenter: blueCircle.horizontalCenter;
            bottom: blueCircle.bottom;
            bottomMargin: fontSize10
          }
          opacity: 0
        }

        AnimatedImage {
          id: gifPulseLine
          anchors {
            left: blueCircle.right
            verticalCenter: spoxBox.verticalCenter
          }
          source: "Images/pulse-line.gif"
          opacity: 0
        }

      }

      Item {
        id: functionEKGContainer
        property int value: 87
        property bool up: true
        property int increment: 1
        property int ceiling: 105
        property int bottomValue: 80

        function increaseDecreaseNumber() {
          if (up === true && value <= ceiling) {
            value += increment

            if (value === ceiling) {
              up = false;
            }
          } else {
            up = false
            value -= increment;

            if (value === bottomValue) {
              up = true;
            }
          }
          textEKGValue.text = value;

        }

        Timer {
          interval: 1000
          running: true
          repeat: true
          triggeredOnStart: true
          onTriggered: functionEKGContainer.increaseDecreaseNumber()
        }
      }

      Item {
        id: functionPulseContainer
        property int value: 80
        property bool up: true
        property int increment: 1
        property int ceiling: 105
        property int bottomValue: 80

        function increaseDecreaseNumber() {
          if (up === true && value <= ceiling) {
            value += increment

            if (value === ceiling) {
              up = false;
            }
          } else {
            up = false
            value -= increment;

            if (value === bottomValue) {
              up = true;
            }
          }
          textPulseValue.text = value;
        }

        Timer {
          interval: 1500
          running: true
          repeat: true
          triggeredOnStart: true
          onTriggered: functionPulseContainer.increaseDecreaseNumber()
        }
      }

      SequentialAnimation {
        id: valueAnimation
        running: true
        PauseAnimation {
          duration: main.textDelay
        }
        NumberAnimation {
          targets: [textEKGValue, textPulseValue]
          property: 'opacity'
          to: 1
          duration: main.textDuration
        }
      }

      SequentialAnimation {
        id: textAnimation
        running: true
        PauseAnimation {
          duration: main.textDelay
        }
        NumberAnimation {
          targets: [textEKG, textBMP, textPulse, textSpO, textInsulinPump, textUHr, insulinP]
          property: 'opacity'
          to: main.subTextOpacity
          duration: main.textDuration
        }
      }

      //----- Insulin
      Rectangle {
        id: insulin
        anchors {
          left: medsBox.left
          leftMargin: -fontSize20
          top: medsBox.bottom
          topMargin: fontSize8
        }

        width: main.width / 2 - fontSize40 + fontSize20
        height: main.height / 4
        color: main.backgroundColor

        Rectangle {
          id: purpleCircle
          anchors {
            verticalCenter: insulin.verticalCenter
            left: insulin.left
          }

          width: boxSize1 + fontSize12
          height: width
          radius: width / 2
          color: main.purple
          opacity: 1

          Text {
            id: textInsulinPump
            color: "#ffffff"
            text: qsTr("Insulin Pump")
            font.pixelSize: fontSize13
            anchors {
              horizontalCenter: purpleCircle.horizontalCenter;
              top: purpleCircle.top;
              topMargin: fontSize20
            }
            opacity: 0
          }

          Text {
            id: textUHr
            color: "#ffffff"
            text: qsTr("U/Hr")
            font.pixelSize: fontSize13
            anchors {
              horizontalCenter: purpleCircle.horizontalCenter;
              bottom: purpleCircle.bottom;
              bottomMargin: fontSize20
            }
            opacity: 0
          }

          Text {
            objectName: "insulinP"
            id: insulinP
            color: "#ffffff"
            text: qsTr("0.65")
            font.pixelSize: fontSize40
            font.family: sourceSansLight.name
            anchors.centerIn: purpleCircle
            opacity: 0
          }
        }

        //Last Bolus
        Rectangle {
          id: lastBBox
          //border.width: 2
          //border.color: "white"

          anchors.verticalCenter: purpleCircle.verticalCenter

          anchors.left: purpleCircle.right
          anchors.leftMargin: fontSize8
          width: boxSize
          height: boxSize
          color: main.backgroundColor

          Text {
            id: textLastBolus
            anchors {
              horizontalCenter: parent.horizontalCenter;
              top: parent.top;
              topMargin: textMargin
            }
            color: "#c2b59b"
            text: qsTr("Last Bolus")
            font.pixelSize: fontSize13
          }

          Text {
            objectName: "lastBolusValue"
            id: lastBolusValue
            anchors {
              horizontalCenter: parent.horizontalCenter;verticalCenter: parent.verticalCenter;
            }
            color: "#c2b59b"
            text: qsTr("3.0")
            font.family: sourceSansLight.name
            font.pixelSize: fontSize40
          }

          Text {
            id: textU
            anchors {
              horizontalCenter: parent.horizontalCenter;
              bottom: parent.bottom
              bottomMargin: textMargin
            }
            //                    width: 19
            //                    height: 16
            color: "#939598"
            text: qsTr("Hr")
            font.pixelSize: fontSize13
          }
        }

        //IOB
        Rectangle {
          id: iobBox

          anchors {
            verticalCenter: purpleCircle.verticalCenter
            left: lastBBox.right
            leftMargin: fontSize8
          }

          width: boxSize
          height: boxSize
          color: main.backgroundColor

          Text {
            id: textIOB
            anchors {
              horizontalCenter: parent.horizontalCenter;
              top: parent.top;
              topMargin: textMargin
            }
            color: "#c2b59b"
            text: qsTr("IOB")
            font.pixelSize: fontSize13
          }

          Text {
            objectName: "iobValue"
            id: iobValue
            anchors {
              horizontalCenter: parent.horizontalCenter;verticalCenter: parent.verticalCenter;
            }
            color: "#c2b59b"
            text: qsTr("2.3")
            font.family: sourceSansLight.name
            font.pixelSize: fontSize40
          }

          Text {
            id: textU1
            anchors {
              horizontalCenter: parent.horizontalCenter;
              bottom: parent.bottom
              bottomMargin: textMargin
            }
            color: "#939598"
            text: qsTr("U")
            font.pixelSize: fontSize12
          }
        }

        //Glucose
        Rectangle {
          id: glucoseBox

          anchors {
            verticalCenter: purpleCircle.verticalCenter
            leftMargin: fontSize8
            left: iobBox.right
          }

          width: boxSize
          height: boxSize
          color: main.backgroundColor

          Text {
            id: textGlucose
            anchors {
              horizontalCenter: parent.horizontalCenter;
              top: parent.top;
              topMargin: textMargin
            }
            color: "#c2b59b"
            text: qsTr("Glucose")
            font.pixelSize: fontSize13
          }

          Text {
            objectName: "glucoseValue"
            id: glucoseValue
            anchors {
              horizontalCenter: parent.horizontalCenter;
              verticalCenter: parent.verticalCenter;
            }
            color: "#c2b59b"
            text: qsTr("130")
            font.family: sourceSansLight.name
            font.pixelSize: fontSize40
          }

          Text {
            id: textMgDL
            anchors {
              horizontalCenter: parent.horizontalCenter;
              bottom: parent.bottom
              bottomMargin: textMargin
            }
            color: "#939598"
            text: qsTr("Mg/DL")
            font.pixelSize: fontSize13
          }
        }

      }











      Rectangle { //Right Side
        id: rightBox
        height: main.height
        width: main.width / 10

        anchors {
          top: main.top;
          right: main.right;
        }
        color: main.backgroundColor








        //----- Alarm
        Rectangle {
          id: buttonAlarmOn
          width: parent.width - fontSize2
          height: width
          color: MyGlobal.alarmBtnBckGOff
          radius: fontSize8
          antialiasing: true
          anchors {
            top: rightBox.top;
            topMargin: fontSize40
            left: parent.left
          }

          Text {
            id: elementTextAlarmButton
            color: MyGlobal.alarmFontColor
            text: qsTr("Alarm")
            font.pixelSize: fontSize10
            anchors {
              bottom: parent.bottom;
              horizontalCenter: parent.horizontalCenter;
              bottomMargin: fontSize5
            }
          }

          Accessible.role: Accessible.Button
          Accessible.onPressAction: {
            button.clicked()
          }

          signal clicked
          Image {
            id: alarmImage
            width: fontSize60
            height: fontSize60
            anchors {
              bottom: parent.bottom;
              bottomMargin: fontSize18
              horizontalCenter: parent.horizontalCenter
            }
            fillMode: Image.PreserveAspectFit
            source: "Images/icon-alarm.png"

            ColorOverlay {
                id: alarmImageColor
                anchors.fill: alarmImage
                source: alarmImage
                color: MyGlobal.alarmColorOff
            }
          }

          MouseArea {
            id: mouseAreaAlarmOn
            anchors.fill: parent
            onClicked: buttonAlarmOn.clicked()
          }

          Keys.onSpacePressed: clicked()
          onClicked: {
            MyGlobal.alarmImageBool = !MyGlobal.alarmImageBool;
            if(MyGlobal.alarmImageBool)
            {
                alarmImageColor.color = MyGlobal.alarmColorOn;
                buttonAlarmOn.color = MyGlobal.alarmBtnBckGOn;
            } else {
                alarmImageColor.color = MyGlobal.alarmColorOff;
                buttonAlarmOn.color = MyGlobal.alarmBtnBckGOff;            }

            submitTextField("btnAlarm.value=" + (MyGlobal.alarmImageBool ? "On" : "Off"));
            console.log("Button ALARM pressed " + (MyGlobal.alarmImageBool ? "On" : "Off"));
          }
        } //end AlarmScreen





        //Vitals
        Rectangle {
          objectName: "buttonVitalsOn"
          id: buttonVitalsOn
          width: parent.width - fontSize2
          height: width
          color: MyGlobal.vitalsBtnBckGOff
          radius: fontSize8
          antialiasing: true

          anchors {
            top: buttonAlarmOn.bottom
            topMargin: fontSize40
            left: parent.left
          }

          Text {
            id: elementTextVitalsOnButton
            color: MyGlobal.vitalsFontColor
            text: qsTr("Vitals")
            font.pixelSize: fontSize10
            anchors {
              bottom: parent.bottom;
              bottomMargin: fontSize5
              horizontalCenter: parent.horizontalCenter;
            }
          }

          Accessible.role: Accessible.Button
          Accessible.onPressAction: {
            button.clicked()
          }

          signal clicked
          Image {
            id: vitalsImage
            width: fontSize60
            height: fontSize60

            anchors {
              bottom: parent.bottom;
              bottomMargin: fontSize18
              horizontalCenter: parent.horizontalCenter;
            }

            fillMode: Image.PreserveAspectFit
            source: "Images/icon-vitals-on.png"
          }

          ColorOverlay {
              id: vitalsImageColor
              anchors.fill: vitalsImage
              source: vitalsImage
              color: MyGlobal.vitalsColorOff
          }

          MouseArea {
            id: mouseAreaVitalsOn
            anchors.fill: parent
            onClicked: buttonVitalsOn.clicked()
          }

          Keys.onSpacePressed: clicked()
          onClicked: {
              MyGlobal.vitalsImageBool = !MyGlobal.vitalsImageBool;
               if(MyGlobal.vitalsImageBool)
               {
                   vitalsImageColor.color = MyGlobal.vitalsColorOn;
                   buttonVitalsOn.color = MyGlobal.vitalsBtnBckGOn;
               } else {
                   vitalsImageColor.color = MyGlobal.vitalsColorOff;
                   buttonVitalsOn.color = MyGlobal.vitalsBtnBckGOff;
               }

              submitTextField("btnVitals.value=" + (MyGlobal.vitalsImageBool ? "On" : "Off"));
              console.debug("Button VITALS pressed " + (MyGlobal.vitalsImageBool ? "On" : "Off"));
          }
        } //end Vitals






        //Help
        Rectangle {
          objectName: "buttonGetHelpOn"
          id: buttonGetHelpOn
          width: parent.width - fontSize2
          height: width
          color: MyGlobal.helpBtnBckGOff
          radius: fontSize8
          antialiasing: true
          anchors {
            top: buttonVitalsOn.bottom;
            topMargin: fontSize40
            left: parent.left
          }

          Text {
            id: elementTextHelpOnButton
            color: MyGlobal.helpFontColor
            text: qsTr("Help")
            font.pixelSize: fontSize10
            anchors {
              bottom: parent.bottom;
              horizontalCenter: parent.horizontalCenter;
              bottomMargin: 5
            }
          }

          Accessible.role: Accessible.Button
          Accessible.onPressAction: {
            button.clicked()
          }

          signal clicked

          Image {
            id: helpImage
            width: fontSize60
            height: fontSize60
            anchors {
              bottom: parent.bottom;
              bottomMargin: fontSize18
              horizontalCenter: parent.horizontalCenter
            }

            fillMode: Image.PreserveAspectFit
            source: "Images/icon-get-help.png"

            ColorOverlay {
                id: helpImageColor
                anchors.fill: helpImage
                source: helpImage
                color: MyGlobal.helpColorOff
            }
          }

          MouseArea {
            id: mouseAreaGetHelpOn
            anchors.fill: parent
            onClicked: buttonGetHelpOn.clicked()
          }
          Keys.onSpacePressed: clicked()
          onClicked: {
              MyGlobal.helpImageBool = !MyGlobal.helpImageBool;
               if(MyGlobal.helpImageBool)
               {
                   helpImageColor.color = MyGlobal.helpColorOn;
                   buttonGetHelpOn.color = MyGlobal.helpBtnBckGOn;
               } else {
                   helpImageColor.color = MyGlobal.helpColorOff;
                   buttonGetHelpOn.color = MyGlobal.helpBtnBckGOff;
               }

              submitTextField("btnHelp.value=" + (MyGlobal.helpImageBool ? "On" : "Off"));
              console.debug("Button HELP pressed " + (MyGlobal.helpImageBool ? "On" : "Off"));
          }
        }  //end Help










        NumberAnimation {
          id: buttonAnimation
          targets: [buttonGetHelpOn, buttonVitalsOn]
          property: "x"
          duration: 800
          from: main.buttonsAnimationX
          to: 730
          running: true
        }

        NumberAnimation {
          id: alarmButtonAnimation
          target: buttonAlarmOn
          property: "x"
          duration: 800
          from: main.buttonsAnimationX
          to: 745
          running: true
        }

        Component.onCompleted: {
        //  sendPreviousScreen.connect(alarmsId.receivePreviousScreen)
        //  startAnimation.connect(alarmsId.receiveAnimation)
        }

        //--- Reach Logo
        Rectangle {
          height: fontSize12
          width: rightBox.width - 3
          //border.width: 2
          //border.color: "orange"
          anchors {
            bottom: rightBox.bottom;
            horizontalCenter: rightBox.horizontalCenter
          }
          color: main.backgroundColor
          Image {
            id: imageLogoReach
            fillMode: Image.PreserveAspectFit
            width: parent.width - 3
            height: parent.height - 3

            anchors {
              bottom: parent.bottom
              bottomMargin: fontSize5
            }

            source: "Images/logo-reach.png"
          }
        } //end Logo
      } //Rectangle - right side
    } //Rectangle - main stackup


 /*

    AlarmScreen {
      id: alarmsId
      stack: stackMain
      isRunning: stackMain.currentIndex === 3
      previousScreen: stackMain.currentIndex

      Component.onCompleted: {
        startAnimation.connect(main.receiveAnimation)
        startAnimation.connect(alarmsId.receiveAnimation)
      }
    }
*/
  }
